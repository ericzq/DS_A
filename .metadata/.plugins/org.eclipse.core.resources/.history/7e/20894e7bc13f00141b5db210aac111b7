import java.util.Date;
import java.util.Random;

/**
 * Write a program to solve the selection problem.
 * 
 * @author zhouyi
 * 
 */
public class Execise_1_1 {
	public static final int N = 100000;
	public static final int k = N / 2;
	public static int num[] = new int[N];

	public static void generate() {
		Random r = new Random();
		for (int i = 0; i < N; i++) {
			num[i] = r.nextInt();
			// System.out.print(num[i]+" \n");
		}
	}

	public static void bubblesort() {
		int tmp;
		for (int i = 0; i < N; i++)
			for (int j = i + 1; j < N; j++) {
				if (num[i] < num[j]) {
					tmp = num[i];
					num[i] = num[j];
					num[j] = tmp;
				}
			}
	}

	public static void quiksort(int i, int j) {
		if (i < j) {
			int ii = i, jj = j;
			int x = num[i];
			while (i < j) {
				while (num[j] >= x && i < j)
					j--;
				num[i] = num[j];
				while (num[i] <= x && i < j)
					i++;
				num[j] = num[i];
			}
			num[i] = x;
			quiksort(ii, i - 1);
			quiksort(j + 1, jj);
		}
	}

	public static void show() {
		for (int i = 0; i < num.length; i++)
			System.out.print(num[i] + "\n");
		System.out.print("\n");
	}

	public static void main(String[] args) {
		generate();
		long t1 = new Date().getTime();
		bubblesort();
		long t2 = new Date().getTime();
		System.out.println("Bubblesort:" + (t2 - t1));
		
		
		generate();
		t1 = new Date().getTime();
		quiksort(0, num.length - 1);
		t2 = new Date().getTime();
		System.out.println("Quiksort:" + (t2 - t1));

		// show();

		// show();
		// generate();
		// long t1=new Date().getTime();
		// System.out.println("Result: "+getK());
		// long t2=new Date().getTime();
		// System.out.print(t2-t1);
	}
}
